<?php

namespace LuTauch\App\Forms;

use LuTauch\App\Enum\DeliveryEnum;
use LuTauch\App\Model\CarrierModel;
use LuTauch\App\Model\CzechPostPickupPointModel;
use LuTauch\App\Model\Options;
use LuTauch\App\Model\ZasilkovnaPickupPointModel;
use Nette\Application\Responses\JsonResponse;
use Nette\Application\UI;
use Nette\Forms\Form;
use Tracy\Debugger;


/**
 * Class ShipmentFormSecond
 * @package LuTauch\App\Forms
 */
class ShipmentFormSecond extends BaseComponent
{

    /**
     * @var array $additionalServices ids of services to be selected
     */
    private $additionalServices;

    private $serviceId;

    /** @var CarrierModel */
    private $carrierModel;

    /**
     * @var Options
     */
    private $options;

    /**
     * @var CzechPostPickupPointModel
     */
    private $czechPostPickupPointModel;

    /**
     * @var ZasilkovnaPickupPointModel
     */
    private $zasilkovnaPickupPointModel;

    private $pickupPlaceInput;

    /**
     * ConfigFormSecond constructor (dependency handover)
     * @param CarrierModel $carrierModel
     * @param CzechPostPickupPointModel $czechPostPickupPointModel
     * @param ZasilkovnaPickupPointModel $zasilkovnaPickupPointModel
     */
    public function __construct(CarrierModel $carrierModel, CzechPostPickupPointModel $czechPostPickupPointModel, ZasilkovnaPickupPointModel $zasilkovnaPickupPointModel)
    {
        $this->carrierModel = $carrierModel;
        $this->czechPostPickupPointModel = $czechPostPickupPointModel;
        $this->zasilkovnaPickupPointModel = $zasilkovnaPickupPointModel;
    }

    public function render()
    {
        $this->template->additionalServices = $this->additionalServices;
        parent::render(); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $additionalServices
     */
    public function setAdditionalService($additionalServices): void
    {
        $this->additionalServices = $additionalServices;
    }

    public function setServiceId(int $serviceId): void
    {
        $this->serviceId = $serviceId;
    }

    public function setOption(Options $options) {
        $this->options = $options;
    }

    public function handleAutocomplete($carrier) {

        if ($carrier == 'ceska_posta') {
            $res = $this->czechPostPickupPointModel->findAll()->fetchAll();
        } else if ($carrier == 'zasilkovna') {
            $res = $this->zasilkovnaPickupPointModel->findAll()->fetchAll();
        }
        $this->presenter->sendResponse(new JsonResponse($res));

        $this->presenter->terminate();

    }

    /**
     * Creates a configuration component consisting of 3 option groups (checkboxlists).
     * @return UI\Form
     */
    protected function createComponentForm(): UI\Form
    {
        $form = new UI\Form();
        $form->setMethod('POST');

        $form = $this->extendForm($form);

        $form->addSubmit('submit', 'Další');
        //setting on success method
        $form->onSuccess[] = [$this, 'shipmentFormSecondSucceeded'];
        return $form;
    }

    public function extendForm(Form $form)
    {
        $additionalServiceArray = $this->getAdditionalServiceArray($this->additionalServices);
        $form->addCheckboxList('additionalService', 'Doplňkové služby', $additionalServiceArray);

        $form->addText('pickup_place', 'Odběrné místo')->setRequired();

        return $form;
    }

    public function getAdditionalServiceArray($additionalServices)
    {
        $return = [];
        foreach ($additionalServices as $serviceName => $additionalService)
        {
            if ($additionalService === 1)
            {
                $return[$serviceName] = DeliveryEnum::getTranslation($serviceName);

            }
            Debugger::barDump($serviceName);
            Debugger::barDump($additionalService);
            Debugger::barDump($return);
        }
    }

    /**
     * Is being called after successful submission of the first configuration form. It processes the data from the form, gets service ids available
     * for the user from the database and sends them to the second configuration form (by redirect).
     * @param UI\Form $form
     * @param \stdClass $values
     * @throws \Nette\Application\AbortException
     */
    public function shipmentFormSecondSucceeded(UI\Form $form, \stdClass $values)
    {

    }
}

